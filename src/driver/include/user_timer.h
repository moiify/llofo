/*
 * user_timer.h
 *
 *  Created on: 2020.04.03
 *      Author: lc
 */
#ifndef __USER_TIMER_H_
#define __USER_TIMER_H_

#include "fibo_opencpu.h"

#define TIMER_NAME_LEN          4
#define TIMER_10MS_LOOP         "10ms"
#define TIMER_ONESECOND_LOOP    "1s  "
#define TIMER_LONGTIME_LOOP     "2m  "

#define TIMER_10MS_LOOP_PERIOD      (10)    //10ms
#define TIMER_ONESECOND_LOOP_PERIOD (1000)  //1000ms
#define TIMER_LONGTIME_LOOP_PERIOD  (2 * 60 * 1000)//2min

typedef enum
{
    TIMER_SEND_UDP,
    TIMER_NMEA_UDP,
    TIMER_BLE_BOOT,
    TIMER_REBOOT,
	TIMER_CHECKCORE, 

	TIMER_HTTPCBDELAY, //10

    TIMER_SOCKET_LOOP,
    TIMER_SOCKET_ONCE,
    TIMER_SOCKET_RECV,
    TIMER_SOCKET_CLOSE,

    TIEMR_BLE_UART,
    TIEMR_GPS_UART,

    TIMER_SLEEP_MOUDLE,
    TIMER_SLEEP_STATUS,

    TIMER_SEND_GPS,
    TIMER_SEND_BMSINFO, //20
    TIMER_SEND_BMSLOOP,
    TIMER_SEND_BMSFAULTLOOP,
    TIMER_ACTIVE_PREQ_SOC, //min

    TIMER_5V_CTRL,
    TIMER_SET_SADDLE,
    TIMER_SET_HELMET,
    TIMER_SET_BACKWHEEL,
    TIMER_SCAN_TBEACON_TIMEOUT,
    TIMER_BLE_CONN_PROTECT,
    TIMER_TURNOVER_AUDIO,
    TIMER_REBOOT_DA14580,
    TIMER_BLINK_LIGHT,
    TIMER_RELEASE_ELOCK,

	TIMER_MAGKICKSTAND,
	TIMER_MAGKICKSTANDCB,

    TIMER_DIAG_CHECK,
    TIMER_MOVE_CHECK,
    TIMER_ANGLE_CHECK,

    TIMER_DETECT_LOOP,
    TIMER_SPEED_LOOP,
    TIMER_GPS_LOOP,
    TIMER_BLE_LOOP,
    TIMER_ETC_LOOP,
    TIMER_EVENT_PROC,
    TIMER_EVENT_SLOOP,
    TIMER_EVENT_LLOOP,
    TIMER_CHECK_AUDIO,
    TIMER_DIAG_DETECT,
    TIMER_SETTING_LISTEN,
    TIMER_MODEM_TIMEOUT,
	TIMER_MOVE_DETECT,
	TIMER_GPS_GETMODEL,
	TIMER_GPS_SETMODEL,

    TIMER_ADC,
    TIMER_WORK_BLINK,
    TIMER_GNSS_BLINK,
	TIMER_BIKELED_BLINK,

    TIMER_ETC_UPGRADE,
    TIMER_ETC_RETRANSFER,
    TIMER_ETC_DELAY,

    TIMER_BMS_UPGRADE,
    TIMER_BMS_RETRANSFER,
    TIMER_BMS_DELAY,

	TIMER_AGPS_PROC, 
	TIMER_AGPS_HTTP,
	TIMER_AGPS_ONCE,
	TIMER_UBLOX_MODE_PROC,
	TIMER_UBLOX_RESET,

	TIMER_PIRVTEST,
    TIMER_DISPLAY_LOG,
    TIMER_HNR_CAL,
    TIMER_LOCK_RESET,
    TIMER_M8U_CHECK,
    TIMER_CHANGESERVER_TIMEOUT,
    TIMER_RFID_POWER,
    TIMER_RFID_RECOVER,
    TIMER_RFID_INIT,
    TIMER_RFID_AUDIO_DONE,
    TIMER_RFID_POWERON,
    TIMER_RFID_DELAY_POWERON,
    TIMER_RFID_DELAY,
    TIMER_RFID485_DELAY,
    TIMER_RFID_STATE_LOOP,
    TIMER_DEFENDMOVE_TIMEOUT,
    TIEMR_PARK_DIR,
    TIMER_DETECT_SHORT_LOOP,
    TIMER_PULSE_TIMEOUT,
    TIMER_CHECKCORE_LOOP,
    TIMER_GPSBAUD_DELAY,
    TIMER_GRADECORE_DELAY,
    TIMER_LOCK_HELMET,
    TIMER_UNLOCK_HELMET,
	TIMER_GETVERSION,
	TIMER_GPS_CHECK_VERSION,
	TIMER_GETSOC_TIMEOUT,
	TIMER_REPORT_SOC,
	TIMER_REFRISH_AUDIO_FILE,
    TIMER_HELMET_DELAY,
    TIMER_WAIT_IMSI_CCID,

    TIMER_WAIT_POWER_CHANGED,
    TIMER_NUM,
} TIMER_ENUM;


typedef enum
{
    TIMER_MS,
    TIMER_S,
    TIMER_M,
    TIMER_TYPE_MAX
} TIMER_TYPE;


typedef enum
{
    TIMER_STOP,
    TIMER_START,
}TIMER_STATE;

typedef int (*TIMER_CB)(void);

typedef struct
{
    uint8_t isRepeat;
    uint8_t isStart;
    uint32_t period;
    uint32_t count;
    TIMER_CB pFun;
    TIMER_TYPE type;
} TIMER_STRUCT;

void timer_initial(void);

int timer_stop(TIMER_ENUM id);
int timer_start(TIMER_ENUM id, TIMER_TYPE type, uint32_t period, TIMER_CB pFun);
int timer_startRepeat(TIMER_ENUM id, TIMER_TYPE type, uint32_t period, TIMER_CB pFun);

int timer_isTimerSleep(void);
int timer_enableSleep(uint8_t isSleep);
int timer_isTimerStart(TIMER_ENUM id);
void timer_threadhandler(void *argument);

unsigned long long timer_getTimerCount(TIMER_TYPE type);

#endif /* __USER_TIMER_H_ */

